require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SalesController, :type => :controller do

  let(:client){ create(:client) }
  let(:sale){ create(:sale, client: client) }
  let(:valid_attributes) { attributes_for(:sale) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SalesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all sales as @sales" do
      get :index, {client_id: client.id}, valid_session
      expect(assigns(:sales)).to eq([sale])
    end
  end

  describe "GET show" do
    it "assigns the requested sale as @sale" do
      get :show, {client_id: sale.client_id, id: sale.to_param}, valid_session
      expect(assigns(:sale)).to eq(sale)
    end
  end

  describe "GET new" do
    it "assigns a new sale as @sale" do
      get :new, {client_id: client.id}, valid_session
      expect(assigns(:sale)).to be_a_new(Sale)
    end
  end

  describe "GET edit" do
    it "assigns the requested sale as @sale" do
      get :edit, {client_id: client.id, id: sale.to_param}, valid_session
      expect(assigns(:sale)).to eq(sale)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Sale" do
        expect {
          post :create, {client_id: client.id, sale: valid_attributes}, valid_session
        }.to change(Sale, :count).by(1)
      end

      it "assigns a newly created sale as @sale" do
        post :create, {client_id: client.id, sale: valid_attributes}, valid_session
        expect(assigns(:sale)).to be_a(Sale)
        expect(assigns(:sale)).to be_persisted
      end

      it "redirects to the created sale" do
        post :create, {client_id: client.id, sale: valid_attributes}, valid_session
        expect(response).to redirect_to(client_sale_path(client, client.sales.last))
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) { attributes_for(:sale) }

      it "updates the requested sale" do
        put :update, {client_id: sale.client.id, id: sale.to_param, sale: new_attributes}, valid_session
        sale.reload
        new_attributes.each do |field, value|
          expect(sale.send(field)).to eq(value)
        end
      end

      it "assigns the requested sale as @sale" do
        put :update, {client_id: sale.client.id, id: sale.to_param, sale: valid_attributes}, valid_session
        expect(assigns(:sale)).to eq(sale)
      end

      it "redirects to the sale" do
        put :update, {client_id: sale.client.id, id: sale.to_param, sale: valid_attributes}, valid_session
        expect(response).to redirect_to(client_sale_path(sale.client, sale))
      end
    end
  end

end
